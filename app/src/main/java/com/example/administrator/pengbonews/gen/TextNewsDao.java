package com.example.administrator.pengbonews.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.administrator.pengbonews.entity.TextNews;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TEXT_NEWS".
*/
public class TextNewsDao extends AbstractDao<TextNews, String> {

    public static final String TABLENAME = "TEXT_NEWS";

    /**
     * Properties of entity TextNews.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Title = new Property(0, String.class, "title", true, "TITLE");
        public final static Property Time = new Property(1, String.class, "time", false, "TIME");
        public final static Property Imgurl = new Property(2, String.class, "imgurl", false, "IMGURL");
        public final static Property NewsId = new Property(3, int.class, "newsId", false, "NEWS_ID");
    }


    public TextNewsDao(DaoConfig config) {
        super(config);
    }
    
    public TextNewsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TEXT_NEWS\" (" + //
                "\"TITLE\" TEXT PRIMARY KEY NOT NULL ," + // 0: title
                "\"TIME\" TEXT," + // 1: time
                "\"IMGURL\" TEXT," + // 2: imgurl
                "\"NEWS_ID\" INTEGER NOT NULL );"); // 3: newsId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TEXT_NEWS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TextNews entity) {
        stmt.clearBindings();
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(1, title);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(2, time);
        }
 
        String imgurl = entity.getImgurl();
        if (imgurl != null) {
            stmt.bindString(3, imgurl);
        }
        stmt.bindLong(4, entity.getNewsId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TextNews entity) {
        stmt.clearBindings();
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(1, title);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(2, time);
        }
 
        String imgurl = entity.getImgurl();
        if (imgurl != null) {
            stmt.bindString(3, imgurl);
        }
        stmt.bindLong(4, entity.getNewsId());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public TextNews readEntity(Cursor cursor, int offset) {
        TextNews entity = new TextNews( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // title
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // time
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // imgurl
            cursor.getInt(offset + 3) // newsId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TextNews entity, int offset) {
        entity.setTitle(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTime(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setImgurl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNewsId(cursor.getInt(offset + 3));
     }
    
    @Override
    protected final String updateKeyAfterInsert(TextNews entity, long rowId) {
        return entity.getTitle();
    }
    
    @Override
    public String getKey(TextNews entity) {
        if(entity != null) {
            return entity.getTitle();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TextNews entity) {
        return entity.getTitle() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
