package com.example.administrator.pengbonews.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.administrator.pengbonews.entity.Favorite;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FAVORITE".
*/
public class FavoriteDao extends AbstractDao<Favorite, String> {

    public static final String TABLENAME = "FAVORITE";

    /**
     * Properties of entity Favorite.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Type = new Property(1, String.class, "type", false, "TYPE");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Source = new Property(3, String.class, "source", false, "SOURCE");
        public final static Property Time = new Property(4, String.class, "time", false, "TIME");
        public final static Property Img = new Property(5, String.class, "img", false, "IMG");
        public final static Property VideoUrl = new Property(6, String.class, "videoUrl", false, "VIDEO_URL");
        public final static Property VideoIcon = new Property(7, String.class, "videoIcon", false, "VIDEO_ICON");
        public final static Property MCommentId = new Property(8, String.class, "mCommentId", false, "M_COMMENT_ID");
    }


    public FavoriteDao(DaoConfig config) {
        super(config);
    }
    
    public FavoriteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FAVORITE\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"TYPE\" TEXT," + // 1: type
                "\"TITLE\" TEXT," + // 2: title
                "\"SOURCE\" TEXT," + // 3: source
                "\"TIME\" TEXT," + // 4: time
                "\"IMG\" TEXT," + // 5: img
                "\"VIDEO_URL\" TEXT," + // 6: videoUrl
                "\"VIDEO_ICON\" TEXT," + // 7: videoIcon
                "\"M_COMMENT_ID\" TEXT);"); // 8: mCommentId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FAVORITE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Favorite entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(2, type);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(4, source);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(5, time);
        }
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(6, img);
        }
 
        String videoUrl = entity.getVideoUrl();
        if (videoUrl != null) {
            stmt.bindString(7, videoUrl);
        }
 
        String videoIcon = entity.getVideoIcon();
        if (videoIcon != null) {
            stmt.bindString(8, videoIcon);
        }
 
        String mCommentId = entity.getMCommentId();
        if (mCommentId != null) {
            stmt.bindString(9, mCommentId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Favorite entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(2, type);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(4, source);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(5, time);
        }
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(6, img);
        }
 
        String videoUrl = entity.getVideoUrl();
        if (videoUrl != null) {
            stmt.bindString(7, videoUrl);
        }
 
        String videoIcon = entity.getVideoIcon();
        if (videoIcon != null) {
            stmt.bindString(8, videoIcon);
        }
 
        String mCommentId = entity.getMCommentId();
        if (mCommentId != null) {
            stmt.bindString(9, mCommentId);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Favorite readEntity(Cursor cursor, int offset) {
        Favorite entity = new Favorite( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // type
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // source
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // time
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // img
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // videoUrl
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // videoIcon
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // mCommentId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Favorite entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setType(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSource(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setImg(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setVideoUrl(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setVideoIcon(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMCommentId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Favorite entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(Favorite entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Favorite entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
